@*@page
    @model LogoutModel
    @{
        ViewData["Title"] = "Log out";
    }

    <header>
        <h1>@ViewData["Title"]</h1>
        @{
            if (User.Identity.IsAuthenticated)
            {
                <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/", new { area = "" })" method="post">
                    <button type="submit" class="nav-link btn btn-link text-dark">Click here to Logout</button>
                </form>
            }
            else
            {
                <p>You have successfully logged out of the application.</p>
            }
        }
    </header>*@

@page
@using Microsoft.AspNetCore.Identity
@attribute [IgnoreAntiforgeryToken]
@inject SignInManager<IdentityUser> SignInManager
@inject EasyQuotationManager.Repository.IRepository.IInternalLogRepository _internalLogRepository;
@functions {
    public async Task<IActionResult> OnPost(string returnUrl = null)
    {
        if (SignInManager.IsSignedIn(User))
        {
            await SignInManager.SignOutAsync();
        }

        #region Following information using for Internal Log
        var razorPageName = @"Identity/Account/LogOut.cshtml";
        var actionName = @"OnPostAsync";
        var log_description = $"{User.Identity.Name} LogOut from the system at {DateTime.Now}.";
        await _internalLogRepository.InsertInternalLog(log_description, null, null, actionName, razorPageName, "Get", null, null, null, null, null, null, null, null, null, null);
        #endregion

        if (returnUrl != null)
        {
            return LocalRedirect(returnUrl);
        }
        else
        {
            return Redirect("~/");
        }


    }
}
