@page "/combined_products/index"
@attribute [Authorize]

<PageTitle Title="Combined Products List" />
<MudText Typo="Typo.h5" Color="MudBlazor.Color.Primary" Class="mb-4"> Combined Products List</MudText>

@if (IsLoading)
{
    <Loading />
}
else if (!models.Any())
{
    <div class="row">
        <div class="col-md-4">
            <MudButton ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Create" Size="MudBlazor.Size.Small" Color="MudBlazor.Color.Primary" @onclick="CreateNewCombinedProduct">Create New Combined Product</MudButton>
        </div>
    </div>
    <RecordNotFoundMessage Message="No Records Found." />
}
else
{
    <div class="row">
        <div class="col-md-4">
            <MudButton ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Create" Size="MudBlazor.Size.Small" Color="MudBlazor.Color.Primary" @onclick="CreateNewCombinedProduct">Create New Combined Product</MudButton>
        </div>
    </div>

    <MudTable ServerData="@(new Func<TableState, Task<TableData<ProductComposition>>>(ServerReload))"
              Dense="@dense"
              Hover="@hover"
              Striped="@striped"
              Bordered="@bordered"
              Virtualize="true"
              FixedHeader="@fixed_header"
              Breakpoint="Breakpoint.Sm"
              @ref="table"
              SortLabel="Sort By">

        <ToolBarContent>
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"> </MudTextField>
        </ToolBarContent>

        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortLabel="CombinedProductIdOrName_filed" T="ProductComposition"> Combined Product Id/Name </MudTableSortLabel>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortLabel="CombinedProductQty_filed" T="ProductComposition">Combined Product Quantity </MudTableSortLabel>
            </MudTh>

            <MudTh Style="text-align:center">
                Actions
            </MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Combined Product Id/Name">@context.CombinedProductIdOrName </MudTd>
            <MudTd DataLabel="Combined Product Quantity">@context.CombinedProductQty </MudTd>
            <MudTd DataLabel="Actions" Style="text-align:center">
                <MudTooltip Text="View" Placement="MudBlazor.Placement.Bottom">
                    <MudFab Color="MudBlazor.Color.Info" Size="MudBlazor.Size.Small" IconSize="MudBlazor.Size.Small" Class="ma-2" Icon="@Icons.Material.Filled.Visibility" OnClick="(()=>View(context.CombinedProductIdOrName))" />
                </MudTooltip>
                <MudTooltip Text="Delete" Placement="MudBlazor.Placement.Bottom">
                    <MudFab Color="MudBlazor.Color.Error" Size="MudBlazor.Size.Small" IconSize="MudBlazor.Size.Small" Class="ma-2" Icon="@Icons.Material.Filled.Delete" OnClick="(()=>Delete(context.CombinedProductIdOrName))" />
                </MudTooltip>
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText>No matching records found</MudText>
        </NoRecordsContent>
        <LoadingContent>
            <MudText>Loading...</MudText>
        </LoadingContent>
        <PagerContent>
            <MudTablePager></MudTablePager>
        </PagerContent>
    </MudTable>
}


@code {
    private string currentLoggedInUserName;
    private string currentLoggedInUserFullName;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private bool fixed_header = false;
    private IEnumerable<ProductComposition> pagedData;
    private MudTable<ProductComposition> table;
    private int totalItems;
    private string searchString = null;
    private IEnumerable<ProductComposition> models = new List<ProductComposition>();
    private bool IsLoading = true;
    private bool isConfirm { set; get; }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            currentLoggedInUserName = user.Identity.Name;
            claims = user.Claims;
            var userDetails = await _userManager.FindByNameAsync(currentLoggedInUserName);
            var userInfo = await _IApplicationUserRepository.GetUserInfo(userDetails.Id);
            currentLoggedInUserFullName = $"{userInfo.FirstName} {userInfo.LastName}";
        }
        else
        {
            currentLoggedInUserName = "UnKnown";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();
        models = await _IProductRepository.GetCombinedProducts();
        IsLoading = false;
    }

    //Here we simulate getting the paged, filtered and ordered data from the server
    private async Task<TableData<ProductComposition>> ServerReload(TableState state)
    {
        models = await _IProductRepository.GetCombinedProducts();
        await Task.Delay(300);
        models = models.Where(s =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (s.CombinedProductIdOrName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if ($"{s.CombinedProductQty}".Contains(searchString))
                return true;
            return false;
        }).ToArray();

        totalItems = models.Count();

        switch (state.SortLabel)
        {
            case "CombinedProductIdOrName_filed":
                models = models.OrderByDirection(state.SortDirection, s => s.CombinedProductIdOrName);
                break;
            case "CombinedProductQty_filed":
                models = models.OrderByDirection(state.SortDirection, s => s.CombinedProductQty);
                break;
        }

        pagedData = models.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<ProductComposition>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private void View(string id)
    {
        _NavigationManager.NavigateTo($"/combined_products/details/{id}");
    }

    private void CreateNewCombinedProduct()
    {
        _NavigationManager.NavigateTo($"/combined_products/create");
    }

    private async Task Delete(string CombinedProductIdOrName )
    {

        bool confirmed = await _IJSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this?");
        if (confirmed)
        {
            var updateStatus = await _IProductRepository.DeleteCombinedProduct(CombinedProductIdOrName);
            if (updateStatus)
            {
                SnackbarControl("Deleted Successfully", Severity.Success, Defaults.Classes.Position.BottomRight, Variant.Outlined);
                await table.ReloadServerData();
                return;
            }
        }
    }

    void SnackbarControl(string message, Severity severity, string position, Variant variant)
    {
        _ISnackbar.Clear();
        _ISnackbar.Configuration.PositionClass = position;
        _ISnackbar.Configuration.SnackbarVariant = variant;
        _ISnackbar.Add(message, severity, config =>
        {
            config.ShowCloseIcon = true;
        });
    }

}
