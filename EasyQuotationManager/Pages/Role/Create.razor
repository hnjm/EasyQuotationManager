@page "/role/create"
@attribute [Authorize(Roles = SD.AdminUser)]

<PageTitle Title="Create Role" />
<MudText Typo="Typo.h5" Color="MudBlazor.Color.Primary" Class="mb-4">Create New Role</MudText>

<EditForm Model="Model" OnValidSubmit="CreateRole">
    <div class="row">
        <div class="col-sm-12 col-md-12 col-lg-6">
            <div class="form-group">
                <label> Role Name </label>
                <InputText @bind-Value="Model.Name" class="form-control" > </InputText>
            </div>
        </div>
    </div>

    <MudButton ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.List" Color="MudBlazor.Color.Info" Size="MudBlazor.Size.Small" @onclick="BackToList">Back To List</MudButton>
    <MudButton ButtonType="MudBlazor.ButtonType.Reset" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh" Color="MudBlazor.Color.Info" Size="MudBlazor.Size.Small">Reset</MudButton>
    <MudButton ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="MudBlazor.Color.Info" Size="MudBlazor.Size.Small">Save</MudButton>
    <div class="mt-5"></div>
</EditForm>


@code {
    private string currentLoggedInUserName;
    private string currentLoggedInUserFullName;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    Microsoft.AspNetCore.Identity.IdentityRole Model = new Microsoft.AspNetCore.Identity.IdentityRole();
    private bool isSuccess = true;

    private async Task GetClaimsPrincipalData()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            currentLoggedInUserName = user.Identity.Name;
            claims = user.Claims;
            var userDetails = await _userManager.FindByNameAsync(currentLoggedInUserName);
            var userInfo = await _IApplicationUserRepository.GetUserInfo(userDetails.Id);
            currentLoggedInUserFullName = $"{userInfo.FirstName} {userInfo.LastName}";
        }
        else
        {
            currentLoggedInUserName = "UnKnown";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();
    }

    private async Task CreateRole()
    {
        try
        {
            if (string.IsNullOrEmpty(Model.Name))
            {
                SnackbarControl("Role Name is required!", Severity.Warning, Defaults.Classes.Position.BottomRight, Variant.Outlined);
                return;
            }
            isSuccess = await _IRoleRepository.InsertRole(Model);
            if (isSuccess)
            {
                SnackbarControl("Role Created Successfully", Severity.Success, Defaults.Classes.Position.BottomRight, Variant.Outlined);
                BackToList();
            }
            else
            {
                SnackbarControl("Somewthing Went Wrong With the Operation", Severity.Error, Defaults.Classes.Position.BottomRight, Variant.Outlined);
            }
        }
        catch (Exception ex)
        {
            SnackbarControl(ex.Message.ToString(), Severity.Warning, Defaults.Classes.Position.BottomRight, Variant.Outlined);
        }
    }

    private void BackToList()
    {
        _NavigationManager.NavigateTo("/role/index");
    }

    void SnackbarControl(string message, Severity severity, string position, Variant variant)
    {
        _ISnackbar.Clear();
        _ISnackbar.Configuration.PositionClass = position;
        _ISnackbar.Configuration.SnackbarVariant = variant;
        _ISnackbar.Add(message, severity, config =>
        {
            config.ShowCloseIcon = true;
        });
    } }
