@page "/customers/company_type_details/{Id}"
@attribute [Authorize]

<PageTitle Title="Details" />
<MudText Typo="Typo.h5" Color="MudBlazor.Color.Primary" Class="mb-4">Details</MudText>

@if (IsLoading)
{
    <Loading />
}
else
{
    <div class="row">
        <div class="col-sm-6">
            <table class="table table-responsive">
                <tr>
                    <td class="table_header"> Name</td>
                    <td> @models.Data.data.name</td>
                </tr>
                <tr>
                    <td class="table_header">Email</td>
                    <td> @models.Data.data.emails.FirstOrDefault()?.email</td>
                </tr>
                <tr>
                    <td class="table_header">Telephones</td>
                    <td> @models.Data.data.telephones.FirstOrDefault()?.number</td>
                </tr>
                <tr>
                    <td class="table_header">NID</td>
                    <td> @models.Data.data.national_identification_number</td>
                </tr>
                <tr>
                    <td class="table_header">Business Type</td>
                    <td> @models.Data.data.business_type.type</td>
                </tr>
                <tr>
                    <td class="table_header">Vat Number</td>
                    <td> @models.Data.data.vat_number</td>
                </tr>
                <tr>
                    <td class="table_header">Tags</td>
                    <td> @models.Data.data.tags.FirstOrDefault()</td>
                </tr>
                <tr>
                    <td class="table_header">Remarks</td>
                    <td> @models.Data.data.remarks</td>
                </tr>
            </table>
        </div>
        <div class="col-sm-6">
            <table class="table table-hover table-responsive">
                <tr>
                    <td class="table_header">IBAN</td>
                    <td> @models.Data.data.iban</td>
                </tr>
                <tr>
                    <td class="table_header">BIC</td>
                    <td> @models.Data.data.bic</td>
                </tr>
                <tr>
                    <td class="table_header">Language</td>
                    <td> @models.Data.data.language</td>
                </tr>
                <tr>
                    <td class="table_header">Payment Term</td>
                    @if (models.Data.data.payment_term == null)
                    {
                        <td></td>
                    }
                    else
                    {
                        <td> @models.Data.data.payment_term.type</td>
                    }

                </tr>
                <tr>
                    <td class="table_header">Electronic Invoicing Address</td>
                    <td> @models.Data.data.invoicing_preferences.electronic_invoicing_address</td>
                </tr>

                <tr>
                    <td class="table_header">Responsible User Type</td>
                    <td> @models.Data.data.responsible_user.type</td>
                </tr>

                <tr>
                    <td class="table_header">Added At</td>
                    <td> @models.Data.data.added_at</td>
                </tr>
            </table>
        </div>
    </div>
    <MudButton ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.List" Color="MudBlazor.Color.Info" Size="MudBlazor.Size.Small" @onclick="BackToList">Back To List</MudButton>
    <div class="mt-5"></div>
}

@code {
    private string currentLoggedInUserName;
    private string currentLoggedInUserFullName;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    [Parameter]
    public string Id { set; get; }
    private CommonServiceResult<CompanyDetailsResponseDTO> models = new CommonServiceResult<CompanyDetailsResponseDTO>();
    private bool IsLoading = true;


    private async Task GetClaimsPrincipalData()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            currentLoggedInUserName = user.Identity.Name;
            claims = user.Claims;
            var userDetails = await _userManager.FindByNameAsync(currentLoggedInUserName);
            var userInfo = await _IApplicationUserRepository.GetUserInfo(userDetails.Id);
            currentLoggedInUserFullName = $"{userInfo.FirstName} {userInfo.LastName}";
        }
        else
        {
            currentLoggedInUserName = "UnKnown";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();
        models = await _ICompanyRepository.Get(Id);
        if (models.Data != null && models.Data.data != null)
        {
            //var parsedModel = _contactService.ConvertGetModelToUpdateModel(model.Data);
            //return View(parsedModel);
        }
        IsLoading = false;
    }

    private void BackToList()
    {
        _NavigationManager.NavigateTo("/customers/company_type");
    }
}