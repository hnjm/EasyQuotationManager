@page "/quotation/create"
@attribute [Authorize]

<PageTitle Title="Quotation" />
<MudText Typo="Typo.h5" Color="MudBlazor.Color.Primary" Class="mb-4">Create Quotation</MudText>

@if (IsLoading)
{
    <Loading />
}
else
{
    <EditForm Model="Model" OnValidSubmit="CreateQuotation">
        <div class="row">
            <div class="col-sm-6">
                <div class="form-group">

                    <div class="form-group">
                        <label> Name </label>
                        <InputText @bind-Value="Model.Name" class="form-control"> </InputText>
                    </div>

                    <div class="form-group">
                        <label> Introduction Text</label>
                        <InputText @bind-Value="Model.IntroductionText" class="form-control"> </InputText>
                    </div>
                    <div class="form-group">
                        <label> Currency: </label> <span> <MudChip Size="Size.Small" Text="purple" Variant="Variant.Filled" Color="Color.Default">EUR - Euro</MudChip> </span>
                        <label> Tax: </label> <span>  <MudChip Size="Size.Small" Text="purple" Variant="Variant.Filled" Color="Color.Default">Excluding VAT</MudChip> </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-12">
                <h5> <span class="badge badge-secondary">ITEMS ON THE QUOTATION: </span></h5>
                <hr />
            </div>

            <div class="col-sm-12">
                <div class="form-row">
                    <div class="form-group col-sm-5">
                        <label> Description </label>
                        <InputTextArea class="form-control" rows="2" placeholder="Description" @bind-Value="Description" />
                    </div>
                    <div class="form-group col-sm-2">
                        <label> Price </label>
                        <InputNumber class="form-control" min="1" placeholder="Price" @bind-Value="Price" />
                    </div>
                    <div class="form-group col-sm-2">
                        <label> Quantity </label>
                        <InputNumber class="form-control" min="1" step="1" placeholder="Quantity" @bind-Value="Quantity" />
                    </div>


                    <div class="form-group col-sm-2">
                        <label> Sub Total </label>
                        @{
                            ProductTotalPrice = Convert.ToDouble(Price * Quantity);
                        }
                        <InputNumber class="form-control" placeholder="Sub Total" @bind-Value="@ProductTotalPrice" readonly="readonly" />
                    </div>

                    <div class="form-group col-sm-4" style="margin-top: 15px;">
                        <a href="javascript:void(0)" class="btn btn-sm btn-outline-info" @onclick="(async () => await AddToTable(Description,Price, Quantity, SubTotal))">Add Items</a>
                    </div>

                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-12">
                <table class="table table-hover table-bordered">
                    <thead>
                        <tr>
                            <th>Description</th>
                            <th>Price</th>
                            <th>Quantity</th>
                            <th class="text-center">Sub Total</th>
                            <th class="text-center"> Action </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in LineItemsDetailsViewModelList)
                        {
                            <tr>
                                <td>@item.Description</td>
                                <td class="text-center">@item.Price</td>
                                <td class="text-center">@item.Quantity</td>
                                <td class="text-center">@item.SubTotal</td>
                                <td class="text-center"> <a href="javascript:void(0)" class="btn btn-danger" @onclick="@(()=>OnItemsDelete(item))">X</a> </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <a href="javascript:void(0)" class="btn btn-sm btn-outline-secondary" @onclick="Clear"> <span class="oi oi-flash"></span>  Clear</a>
        <MudButton ButtonType="MudBlazor.ButtonType.Reset" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh" Color="MudBlazor.Color.Info" Size="MudBlazor.Size.Small">Reset</MudButton>
        <MudButton ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="MudBlazor.Color.Info" Size="MudBlazor.Size.Small">Save</MudButton>
        <div class="mt-5"></div>
    </EditForm>
}


@code {
    private string currentLoggedInUserName;
    private string currentLoggedInUserFullName;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    private bool IsLoading = true;
    private bool isSuccess = true;


    protected string Description { set; get; }
    protected double Price { set; get; }
    protected int Quantity { get; set; }
    public double SubTotal { set; get; }
    protected double ProductTotalPrice { set; get; }

    private QuotationModel Model = new QuotationModel();
    protected List<LineItemsDetailsViewModel> LineItemsDetailsViewModelList = new List<LineItemsDetailsViewModel>();

    private async Task GetClaimsPrincipalData()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            currentLoggedInUserName = user.Identity.Name;
            claims = user.Claims;
            var userDetails = await _userManager.FindByNameAsync(currentLoggedInUserName);
            var userInfo = await _IApplicationUserRepository.GetUserInfo(userDetails.Id);
            currentLoggedInUserFullName = $"{userInfo.FirstName} {userInfo.LastName}";
        }
        else
        {
            currentLoggedInUserName = "UnKnown";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();
        IsLoading = false;
    }



    protected async Task AddToTable(string Description, double Price, int Quantity, double SubTotal)
    {
        if (string.IsNullOrEmpty(Description))
        {
            SnackbarControl("Please insert Description", Severity.Warning, Defaults.Classes.Position.BottomRight, Variant.Outlined);
            return;
        }
        if (Price == 0)
        {
            SnackbarControl("Please provide Price", Severity.Warning, Defaults.Classes.Position.BottomRight, Variant.Outlined);
            return;
        }
        if (Quantity == 0)
        {
            SnackbarControl("Please provide quantity", Severity.Warning, Defaults.Classes.Position.BottomRight, Variant.Outlined);
            return;
        }

        LineItemsDetailsViewModel lineItemsDetailsViewModel = new LineItemsDetailsViewModel
        {
            Description = Description,
            Price = Price,
            Quantity = Quantity,
            SubTotal = ProductTotalPrice
        };
        var pitem_already_added_in_table = LineItemsDetailsViewModelList.Where(s => s.Description == Description).ToList();
        if (pitem_already_added_in_table.Count() > 0)
        {
            SnackbarControl("This item already added. Please remove this item from the table first then add or add another item", Severity.Warning, Defaults.Classes.Position.BottomRight, Variant.Outlined);
            return;
        }

        LineItemsDetailsViewModelList.Add(lineItemsDetailsViewModel);
    }

    public void OnItemsDelete(LineItemsDetailsViewModel lineItemsDetailsViewModel)
    {
        LineItemsDetailsViewModelList.Remove(lineItemsDetailsViewModel);
    }

    private async Task CreateQuotation()
    {
        try
        {
            if (string.IsNullOrEmpty(Model.Name))
            {
                SnackbarControl("Please insert Name", Severity.Warning, Defaults.Classes.Position.BottomRight, Variant.Outlined);
                return;
            }

            if (string.IsNullOrEmpty(Model.IntroductionText))
            {
                SnackbarControl("Please insert Introduction Text", Severity.Warning, Defaults.Classes.Position.BottomRight, Variant.Outlined);
                return;
            }

            if (LineItemsDetailsViewModelList.Count() == 0)
            {
                SnackbarControl("You have to add at least one item", Severity.Warning, Defaults.Classes.Position.BottomRight, Variant.Outlined);
                return;
            }
            Model.LineItems = LineItemsDetailsViewModelList;
            var result = await _IQuotationRepository.Create(Model);
            if (isSuccess)
            {
                SnackbarControl("Quotation Created Successfully!", Severity.Success, Defaults.Classes.Position.BottomRight, Variant.Outlined);
                await Task.Delay(600);
                _NavigationManager.NavigateTo(_NavigationManager.Uri, forceLoad: true);
            }
            else
            {
                SnackbarControl("Somewthing Went Wrong With the Operation", Severity.Error, Defaults.Classes.Position.BottomRight, Variant.Outlined);
            }
        }
        catch (Exception ex)
        {
            SnackbarControl(ex.Message.ToString(), Severity.Warning, Defaults.Classes.Position.BottomRight, Variant.Outlined);
        }
    }

    private void Clear()
    {
        Model = new QuotationModel();
        Model.Name = null;
        Model.IntroductionText = null;
        LineItemsDetailsViewModelList.Clear();
    }

    void SnackbarControl(string message, Severity severity, string position, Variant variant)
    {
        _ISnackbar.Clear();
        _ISnackbar.Configuration.PositionClass = position;
        _ISnackbar.Configuration.SnackbarVariant = variant;
        _ISnackbar.Add(message, severity, config =>
        {
            config.ShowCloseIcon = true;
        });
    }



}
