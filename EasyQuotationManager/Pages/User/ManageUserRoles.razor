@page "/user/manage_user_roles/{Id}"
@attribute [Authorize(Roles = SD.AdminUser)]

<PageTitle Title="Manage User roles" />
<MudText Typo="Typo.h5" Color="MudBlazor.Color.Primary" Class="mb-4">Manage User roles</MudText>

@if (string.IsNullOrWhiteSpace(Id))
{
<ErrorMessage Message="Invalid Selection. Please Try Again" />
}
@if (Model == null)
{
<Loading />
}
else
{
<EditForm Model="Model" OnValidSubmit="UpdateUserRoles">
    <div class="row">
        <div class="col-sm-12">
            <div class="card">
                <div class="card-header">
                    <div class="text-info">
                        Add/Remove Roles for User <strong> @Model.Select(s => s.UserName).FirstOrDefault() </strong>
                    </div>
                </div>
                <div class="card-body">
                    @foreach (var item in Model)
                    {
                        <div class="form-check">
                            <input type="hidden" value="@item.RoleId" />
                            <input class="form-check-input" type="checkbox" @bind="@item.Selected">
                            <label class="form-check-label" for="RoleName">
                                @item.RoleName
                            </label>
                        </div>              
                     }
                </div>
            </div>
        </div>
    </div>
    <div class="mt-5"></div>
    <MudButton ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.List" Color="MudBlazor.Color.Info" Size="MudBlazor.Size.Small" @onclick="BackToList">Back To List</MudButton>
    <MudButton ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Update" Color="MudBlazor.Color.Info" Size="MudBlazor.Size.Small" @onclick="UpdateUserRoles">Update</MudButton>
    <div class="mt-5"></div>
</EditForm>
}


@code {
    private string currentLoggedInUserName;
    private string currentLoggedInUserFullName;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    [Parameter]
    public string Id { set; get; }
    private bool isSuccess = true;
    private IList<ManageUserRolesViewModel> Model = new List<ManageUserRolesViewModel>();

    private async Task GetClaimsPrincipalData()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            currentLoggedInUserName = user.Identity.Name;
            claims = user.Claims;
            var userDetails = await _userManager.FindByNameAsync(currentLoggedInUserName);
            var userInfo = await _IApplicationUserRepository.GetUserById(userDetails.Id);
            currentLoggedInUserFullName = $"{userInfo.FirstName} {userInfo.LastName}";
        }
        else
        {
            currentLoggedInUserName = "UnKnown";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();
        Model = await _IApplicationUserRepository.GetManageUserRoles(Id);
    }

    private async Task UpdateUserRoles()
    {
        try
        {
            var selectedRoles = Model.Where(s => s.Selected == true).ToList();
            if (selectedRoles.Count() == 0)
            {
                SnackbarControl("Please select at least one role!", Severity.Warning, Defaults.Classes.Position.BottomRight, Variant.Outlined);
                StateHasChanged();
                return;
            }
            var selectedUserId = Model.Select(s => s.ApplicationUserId).FirstOrDefault();
            isSuccess = await _IApplicationUserRepository.UpdateManageUserRoles(Model, selectedUserId);
            if (isSuccess)
            {
                SnackbarControl("User Update Successfully", Severity.Success, Defaults.Classes.Position.BottomRight, Variant.Outlined);
                BackToList();
            }
            else
            {
                SnackbarControl("Somewthing Went Wrong With the Operation", Severity.Error, Defaults.Classes.Position.BottomRight, Variant.Outlined);
            }
        }
        catch (Exception ex)
        {
            SnackbarControl(ex.Message.ToString(), Severity.Warning, Defaults.Classes.Position.BottomRight, Variant.Outlined);
        }
    }

    private void BackToList()
    {
        _NavigationManager.NavigateTo("/user/index");
    }

    void SnackbarControl(string message, Severity severity, string position, Variant variant)
    {
        _ISnackbar.Clear();
        _ISnackbar.Configuration.PositionClass = position;
        _ISnackbar.Configuration.SnackbarVariant = variant;
        _ISnackbar.Add(message, severity, config =>
        {
            config.ShowCloseIcon = true;
        });
    }
}
