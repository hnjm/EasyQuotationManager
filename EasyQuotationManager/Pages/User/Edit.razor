@page "/user/edit/{Id}"
@attribute [Authorize(Roles = SD.AdminUser)]

<PageTitle Title="Edit User" />
<MudText Typo="Typo.h5" Color="MudBlazor.Color.Primary" Class="mb-4">Edit User</MudText>

@if (string.IsNullOrWhiteSpace(Id))
{
<ErrorMessage Message="Invalid Selection. Please Try Again" />
}
else if (Model == null)
{
<Loading />
}
else
{
<EditForm Model="Model" OnValidSubmit="EditUser">
    <FluentValidationValidator></FluentValidationValidator>
    <div class="row">
        <div class="col-sm-12 col-md-12 col-lg-6">

            <div class="form-group">
                <label> First Name </label>
                <InputText @bind-Value="Model.FirstName" class="form-control"> </InputText>
                <ValidationMessage For="@(() => Model.FirstName)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label> Last Name </label>
                <InputText @bind-Value="Model.LastName" class="form-control"> </InputText>
                <ValidationMessage For="@(() => Model.LastName)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label> Email </label>
                <InputText @bind-Value="Model.Email" class="form-control" readonly="readonly"> </InputText>
                <ValidationMessage For="@(() => Model.Email)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label> Phone Number </label>
                <InputText @bind-Value="Model.PhoneNumber" class="form-control"> </InputText>
                <ValidationMessage For="@(() => Model.PhoneNumber)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label> License Expiration Date </label>
                <InputDate @bind-Value="Model.LicenseExpirationDate" class="form-control"> </InputDate>
                <ValidationMessage For="@(()=> Model.LicenseExpirationDate)"></ValidationMessage>
            </div>

            <div class="form-group">
                <label> Roles </label><br />
                @foreach (var item in ViewModel)
                {
        <div class="form-check">
            <input type="hidden" value="@item.RoleId" />
            <input class="form-check-input" type="checkbox" @bind="@item.Selected">
            <label class="form-check-label" for="RoleName">
                @item.RoleName
            </label>
        </div>}
            </div>
        </div>
    </div>

    <MudButton ButtonType="MudBlazor.ButtonType.Button" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.List" Color="MudBlazor.Color.Info" Size="MudBlazor.Size.Small" @onclick="BackToList">Back To List</MudButton>
    <MudButton ButtonType="MudBlazor.ButtonType.Reset" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Refresh" Color="MudBlazor.Color.Info" Size="MudBlazor.Size.Small">Reset</MudButton>
    <MudButton ButtonType="MudBlazor.ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Update" Color="MudBlazor.Color.Info" Size="MudBlazor.Size.Small" @onclick="EditUser">Update</MudButton>
</EditForm>
}


@code{ private string currentLoggedInUserName;
    private string currentLoggedInUserFullName;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    [Parameter]
    public string Id { set; get; }
    ApplicationUserEditViewModel Model = new ApplicationUserEditViewModel();
    private IList<ManageUserRolesViewModel> ViewModel = new List<ManageUserRolesViewModel>();
    private bool isSuccess = true;

    private async Task GetClaimsPrincipalData()
    {
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            currentLoggedInUserName = user.Identity.Name;
            claims = user.Claims;
            var userDetails = await _userManager.FindByNameAsync(currentLoggedInUserName);
            var userInfo = await _IApplicationUserRepository.GetUserById(userDetails.Id);
            currentLoggedInUserFullName = $"{userInfo.FirstName} {userInfo.LastName}";
        }
        else
        {
            currentLoggedInUserName = "UnKnown";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();
        Model = await _IApplicationUserRepository.GetUserByIdInViewModel(Id);
        ViewModel = await _IApplicationUserRepository.GetManageUserRoles(Id);
    }

    private async Task EditUser()
    {
        try
        {
            var selectedRoles = ViewModel.Where(s => s.Selected == true).ToList();
            if (selectedRoles.Count() == 0)
            {
                SnackbarControl("Please select at least one role!", Severity.Warning, Defaults.Classes.Position.BottomRight, Variant.Outlined);
                StateHasChanged();
                return;
            }

            isSuccess = await _IApplicationUserRepository.UpdateUser(Model, Id, selectedRoles);
            if (isSuccess)
            {
                SnackbarControl("User Updated Successfully", Severity.Success, Defaults.Classes.Position.BottomRight, Variant.Outlined);
                BackToList();
            }
            else
            {
                SnackbarControl("Somewthing Went Wrong With the Operation", Severity.Error, Defaults.Classes.Position.BottomRight, Variant.Outlined);
            }
        }
        catch (Exception ex)
        {
            SnackbarControl(ex.Message.ToString(), Severity.Warning, Defaults.Classes.Position.BottomRight, Variant.Outlined);
        }
    }

    private void BackToList()
    {
        _NavigationManager.NavigateTo("/user/index");
    }

    void SnackbarControl(string message, Severity severity, string position, Variant variant)
    {
        _ISnackbar.Clear();
        _ISnackbar.Configuration.PositionClass = position;
        _ISnackbar.Configuration.SnackbarVariant = variant;
        _ISnackbar.Add(message, severity, config =>
        {
            config.ShowCloseIcon = true;
        });
    }
}
